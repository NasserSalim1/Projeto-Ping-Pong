<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ping Pong</title>
    <style>
        * {
            overflow: hidden;
            margin: 0;
            padding: 0;
        }
    </style>
</head>

<body>
    <canvas></canvas>
    <script>
        const canvasEl = document.querySelector("canvas"),
            canvasCtx = canvasEl.getContext("2d"),
            gapX = 10



        const field = { // Ao invés de sair espalhando funções pelo código, vou consentrar toda a lógica do código dentro de um objeto 
            w: window.innerWidth,
            h: window.innerHeight,
            draw: function () { // Método do objeto, é como se fosse uma função
                // Desenho do campo
                canvasCtx.fillStyle = "#286047" // define a cor da figura
                canvasCtx.fillRect(0, 0, this.w, this.h) // Desenha o retângulo -- (0,0) Significa que começa no canto superior esquedo da tela (isso é default), (window.innerWidth, window.innerHeight) Diz que vamos ocupar 100% da tela    
            }
        }

        const line = {
            w: 15,
            h: field.h,
            draw: function () {
                // Desenho da linha central
                canvasCtx.fillStyle = "#ffffff"
                canvasCtx.fillRect(
                    field.w / 2 - this.w / 2,
                    0,
                    this.w,
                    this.h
                )
            }
        }

        const leftPaddle = {
            x: gapX,
            y: 100,
            w: line.w,
            h: 200,
            draw: function () {
                canvasCtx.fillStyle = "#ffffff"
                // Desenho da raquete esquerda 
                canvasCtx.fillRect(this.x, this.y, this.w, this.h) // A altura do desenho n importa no momento pois a requete irá se mover com o mouse mais para frente
            }
        }

        const rightPaddle = {
            x: field.w - line.w - gapX,
            y: 200,
            w: line.w,
            h: 200,
            draw: function () {
                canvasCtx.fillStyle = "#ffffff"
                // Desenho da raquete esquerda 
                canvasCtx.fillRect(this.x, this.y, this.w, this.h) // A altura do desenho n importa no momento pois a requete irá se mover com o mouse mais para frente
            }
        }

        const ball = {
            x: 480,
            y: 60,
            r: 20,
            speed: 5,
            _move: function () { // Função dew movimento da bolinha (É tipo um while controlado)
                this.x += 1 * this.speed
                this.y += 1 * this.speed
            },
            draw: function () {
                canvasCtx.fillStyle = "#ffffff"
                // Desenhando a bolinha
                canvasCtx.beginPath()
                canvasCtx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false)
                canvasCtx.fill()

                this._move()
            }
        }

        const score = {
            human: 1,
            computer: 2,
            draw: function () {
                canvasCtx.font = "bold 72px Arial"
                canvasCtx.textAlign = 'center'
                canvasCtx.textBaseline = 'top'
                canvasCtx.fillStyle = '#01341d'
                canvasCtx.fillText(this.human, field.w / 4, 50)
                canvasCtx.fillText(this.computer, field.w / 4 + field.w / 2, 50)
            }
        }



        function setup() {
            canvasEl.width = canvasCtx.width = field.w // Posso usar as propriedades do objeto para paltar outros comandos do código (field.w)  
            canvasEl.height = canvasCtx.height = field.h // Posso usar as propriedades do objeto para paltar outros comandos do código (field.h)
        }

        function draw() {
            field.draw()
            line.draw()

            leftPaddle.draw()
            rightPaddle.draw()

            score.draw()

            ball.draw()
        }

        window.animateFrame = (function () { // API suavização de imagem
            return (
                window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.oRequestAnimationFrame ||
                window.msRequestAnimationFrame ||
                function (callback) {
                    return window.setTimeout(callback, 1000 / 60)
                }
            )
        })() 

        function main(){
            animateFrame(main)
            draw()
        }

        setup()
        main()
    </script>
</body>

</html>